#whether to use dynamic log (don't have to be true in general)
dynamicLog=false

#the number of physical machines
numOfPhyHosts=8

#whether you want to finish all jobs: true or false (deprecated parameter, don't have to care about it)
completeAllWorkload=true

#paralleldegree, simJobNum are only valid when useJobArrivalTrace=false
#in this situation, if paralleldegree=100, then at most 100 jobs can be run simultaneously in system.
paralleldegree=100

#simJobNum is only valid when jobOverlay is false
simJobNum=800

#In my environment, VM image just has 100MB idle space while each VM's memory is huge (2GB). So, I split memory into two parts, ramdisk and usage memory as follows. 
#memconfig:MB
ramdiskSize=1024
memSize=1024

#the max size of the simulated job (MB), note Google job's memory can be up to 1GB or larger. For simplicity, I limited memory size in 10-200MB
simMaxMemSize=200
simMinMemSize=10

#When using BoT jobs, the maximum number of batchtasks to run per job
maxBTNumPerJob=100

#jobTraceDir contains the object job trace file (containing all sample jobs), note that /cloudNFS is a NFS directory which can be seen by all VM instances
jobTraceDir=/cloudNFS/CheckpointSim/simFailureTrace

#the selected job trace file, you could use prepare.TestLoadJobTrace.java to read its content
jobTraceFileName=jobTrace-SC-4000-dec.obj

#jobArrivalTrace.txt contains the timestemps of job arrival in Google trace.
jobArrivalTraceFile=jobArrivalTrace.txt

#the master server name
mainServerAddress=sgk1

#cpNFSContextDir is the shared-dir (NFS) to store checkpoint files
#note: cpNFSContextDir must be two-layer directory, e.g., /a/b, and this directory is a NFS dir. 
#in my testbed, each physical host is a different NFS server, and it has a different NFS mount point.
#For example, host se017e corresponds to /localfs/contextNFS/0, se018e corresponds to /localfs/contextNFS/1, etc.
#Each VM instance needs to mount all of the NFS mount points
#Details can be found in SC'13 paper (about the DM-NFS design and why we design it like this)
cpNFSContextDir=/localfs/contextNFS

#local dir for storing checkpoint files on VM instances
cpLocalContextDir=/ramfs

#an NFS dir to store checkpoint states
cpStateDir=/cloudNFS/CheckpointSim/cpState

#an NFS dir to keep all debug information
debugRootDir=/cloudNFS/CheckpointSim/debug

#an NFS dir to keep all heapMemFiles (This files are named as 0.heap, 1,heap, ...., 100.heap, and their sizes are 0MB, 2MB, .... 200MB)
# heapMemFiles will be loaded whenever a task is simulated, for emulating the real memory consumption.
heapDir=/cloudNFS/CheckpointSim/heapMemFiles

#true: job submission will follow jobArrivalTrace.txt; otherwise, job submission is determined by the parameters "simJobNum" and "paralleldegree"
useJobArrivalTrace=true

#the cost files characterized by the preperation step, such as EstCheckpointCost.java, EstResetartOverhead.java
# the cost files contain the checkpointing cost information, for the optimization of checkpoint interval
# the cost files are supposed to be stored in NFS dir
nfsCpcostFile=/cloudNFS/CheckpointSim/cost/nfs-cp.cost
ramfsCpcostFile=/cloudNFS/CheckpointSim/cost/ramfs-cp.cost
nfsRscostFile=/cloudNFS/CheckpointSim/cost/nfs-restart.cost
ramfsRscostFile=/cloudNFS/CheckpointSim/cost/remotedisk-mv-restart.cost

#taskMode could be single (only single jobs), batch (BoT jobs), mix (mixture of both)
taskMode=batch

#useRamfs=false means the device is only NFS;otherwise, both (unimplemented)
useRamfs=true

#testMode:static or dynamic
#if testMode is dynamic, then the each batchtask's priority will be changed once in its execution
#if testMode is static, the following parameters' values will be ignored
testMode=static

#following is only valid when testMode=dynamic
#RL=500:the priority values stored in prioritycontainer:(index,priority)=0,4:2.0625 1,0:2.0709 2,10:0 3,9:2 4,6:2 5,11:0 6,2:2 7,3:9 8,7:0 9,1:2.05 10,8:2 11,5:0
#RL=4000:the priority values stored in prioritycontainer:(index,priority)=0,4:2.0678 1,0:2.188 2,10:0 3,9:4.5 4,6:2 5,11:0 6,2:2 7,3:9 8,7:0 9,1:2.0888 10,8:2.0106 11,5:0
#RL=8000:the priority values stored in prioritycontainer:(index,priority)=0,4:2.0635 1,0:3.07 2,10:0 3,9:4.5 4,6:2 5,11:0 6,2:2 7,3:9 8,7:0 9,1:2.097 10,8:2.097 11,5:0
#dynPriority means priority values: eg., 4 means 0,(4)
dynPriority=0 1
minConnectBTNum=2
maxConnectBTNum=2
#whether to switch on dynamic solution, where the MNOF will be changed according to situation (see the last figure of my SC'13 paper)
dynamicSolu=false

#don't have to care about the following parameters, or read the source codes for details if you want
loadRatio=1
cpCost=1
#maxCapMemSize: M bytes
maxCapMemSize=32000
tuneWorkloadRatio=0.9702
blackJobList=6256487303
